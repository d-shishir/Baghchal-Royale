"""Make all DateTime columns timezone-aware and fix AIGame model

Revision ID: e7888b6e1a66
Revises: 5e04f4d2b120
Create Date: 2025-07-07 16:06:02.362899

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e7888b6e1a66'
down_revision: Union[str, Sequence[str], None] = '5e04f4d2b120'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    friendshipstatus = postgresql.ENUM('PENDING', 'ACCEPTED', 'DECLINED', name='friendshipstatus')
    friendshipstatus.create(op.get_bind())
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('ai_games', sa.Column('user_side', sa.String(), nullable=False))
    op.alter_column('ai_games', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.add_column('ai_moves', sa.Column('ai_move_id', sa.UUID(), nullable=False))
    op.add_column('ai_moves', sa.Column('timestamp', sa.DateTime(timezone=True), nullable=True))
    op.drop_column('ai_moves', 'move_id')
    op.drop_column('ai_moves', 'created_at')
    op.add_column('feedback', sa.Column('subject', sa.String(), nullable=False))
    op.alter_column('feedback', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('feedback', 'message',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('feedback', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.add_column('friendships', sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'DECLINED', name='friendshipstatus'), nullable=False))
    op.alter_column('friendships', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.add_column('games', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('games', 'ended_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_column('games', 'started_at')
    op.add_column('moves', sa.Column('timestamp', sa.DateTime(timezone=True), nullable=True))
    op.drop_column('moves', 'created_at')
    op.add_column('ratings_history', sa.Column('rating_history_id', sa.UUID(), nullable=False))
    op.add_column('ratings_history', sa.Column('rating_change', sa.Integer(), nullable=False))
    op.add_column('ratings_history', sa.Column('new_rating', sa.Integer(), nullable=False))
    op.add_column('ratings_history', sa.Column('date', sa.DateTime(timezone=True), nullable=False))
    op.drop_constraint(op.f('ratings_history_game_id_fkey'), 'ratings_history', type_='foreignkey')
    op.drop_column('ratings_history', 'rating_before')
    op.drop_column('ratings_history', 'rating_after')
    op.drop_column('ratings_history', 'id')
    op.drop_column('ratings_history', 'game_id')
    op.drop_column('ratings_history', 'changed_at')
    op.alter_column('reports', 'reason',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('reports', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint(op.f('reports_game_id_fkey'), 'reports', type_='foreignkey')
    op.drop_column('reports', 'game_id')
    op.alter_column('tournaments', 'start_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('tournaments', 'end_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('tournaments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('tournaments', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('tournaments', 'end_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('tournaments', 'start_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.add_column('reports', sa.Column('game_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('reports_game_id_fkey'), 'reports', 'games', ['game_id'], ['game_id'])
    op.alter_column('reports', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('reports', 'reason',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('ratings_history', sa.Column('changed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('ratings_history', sa.Column('game_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('ratings_history', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('ratings_history', sa.Column('rating_after', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ratings_history', sa.Column('rating_before', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('ratings_history_game_id_fkey'), 'ratings_history', 'games', ['game_id'], ['game_id'])
    op.drop_column('ratings_history', 'date')
    op.drop_column('ratings_history', 'new_rating')
    op.drop_column('ratings_history', 'rating_change')
    op.drop_column('ratings_history', 'rating_history_id')
    op.add_column('moves', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('moves', 'timestamp')
    op.add_column('games', sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.alter_column('games', 'ended_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('games', 'created_at')
    op.alter_column('friendships', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('friendships', 'status')
    op.alter_column('feedback', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('feedback', 'message',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('feedback', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('feedback', 'subject')
    op.add_column('ai_moves', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('ai_moves', sa.Column('move_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_column('ai_moves', 'timestamp')
    op.drop_column('ai_moves', 'ai_move_id')
    op.alter_column('ai_games', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('ai_games', 'user_side')
    friendshipstatus = postgresql.ENUM('PENDING', 'ACCEPTED', 'DECLINED', name='friendshipstatus')
    friendshipstatus.drop(op.get_bind())
    # ### end Alembic commands ###
