"""Initial schema from new models

Revision ID: 1931e0c7a19c
Revises: 
Create Date: 2025-07-07 14:10:12.167396

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1931e0c7a19c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tournaments',
    sa.Column('tournament_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('KNOCKOUT', 'ROUND_ROBIN', name='tournamenttype'), nullable=False),
    sa.Column('status', sa.Enum('UPCOMING', 'ONGOING', 'COMPLETED', name='tournamentstatus'), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('tournament_id')
    )
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('ai_games',
    sa.Column('ai_game_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('difficulty', sa.Enum('EASY', 'MEDIUM', 'HARD', name='aigamedifficulty'), nullable=False),
    sa.Column('result', sa.Enum('WIN', 'LOSS', 'DRAW', name='aigameresult'), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('ai_game_id')
    )
    op.create_table('feedback',
    sa.Column('feedback_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('type', sa.Enum('BUG', 'SUGGESTION', 'OTHER', name='feedbacktype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('feedback_id')
    )
    op.create_table('friendships',
    sa.Column('user_id_1', sa.UUID(), nullable=False),
    sa.Column('user_id_2', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('user_id_1 != user_id_2'),
    sa.ForeignKeyConstraint(['user_id_1'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['user_id_2'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id_1', 'user_id_2')
    )
    op.create_table('games',
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('player_goat_id', sa.UUID(), nullable=False),
    sa.Column('player_tiger_id', sa.UUID(), nullable=False),
    sa.Column('winner_id', sa.UUID(), nullable=True),
    sa.Column('result', sa.Enum('GOAT_WIN', 'TIGER_WIN', 'DRAW', 'ABORTED', name='gameresult'), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['player_goat_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['player_tiger_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['winner_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('game_id')
    )
    op.create_table('tournament_entries',
    sa.Column('tournament_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'ELIMINATED', 'WINNER', name='tournamententrystatus'), nullable=False),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.tournament_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('tournament_id', 'user_id')
    )
    op.create_table('ai_moves',
    sa.Column('move_id', sa.UUID(), nullable=False),
    sa.Column('ai_game_id', sa.UUID(), nullable=False),
    sa.Column('player', sa.Enum('USER', 'AI', name='aiplayer'), nullable=False),
    sa.Column('move_number', sa.Integer(), nullable=False),
    sa.Column('from_pos', sa.String(), nullable=False),
    sa.Column('to_pos', sa.String(), nullable=False),
    sa.Column('move_type', sa.Enum('PLACE', 'MOVE', 'CAPTURE', name='movetype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ai_game_id'], ['ai_games.ai_game_id'], ),
    sa.PrimaryKeyConstraint('move_id')
    )
    op.create_table('moves',
    sa.Column('move_id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('move_number', sa.Integer(), nullable=False),
    sa.Column('from_pos', sa.String(), nullable=False),
    sa.Column('to_pos', sa.String(), nullable=False),
    sa.Column('move_type', sa.Enum('PLACE', 'MOVE', 'CAPTURE', name='movetype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('move_id')
    )
    op.create_table('ratings_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.Column('rating_before', sa.Integer(), nullable=False),
    sa.Column('rating_after', sa.Integer(), nullable=False),
    sa.Column('changed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reports',
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('reporter_id', sa.UUID(), nullable=False),
    sa.Column('reported_id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=True),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('OPEN', 'REVIEWED', 'DISMISSED', name='reportstatus'), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['reported_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['reporter_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('report_id')
    )
    op.create_table('tournament_matches',
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('tournament_id', sa.UUID(), nullable=False),
    sa.Column('game_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.tournament_id'], ),
    sa.PrimaryKeyConstraint('match_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tournament_matches')
    op.drop_table('reports')
    op.drop_table('ratings_history')
    op.drop_table('moves')
    op.drop_table('ai_moves')
    op.drop_table('tournament_entries')
    op.drop_table('games')
    op.drop_table('friendships')
    op.drop_table('feedback')
    op.drop_table('ai_games')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('tournaments')
    # ### end Alembic commands ###
